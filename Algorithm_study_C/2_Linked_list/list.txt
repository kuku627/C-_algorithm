리스트(list)란?
• 순서를 가진 데이터의 모임. 목록.
• (e.g.) TO DO 리스트, 요일(일요일, 월요일, …, 토요일), etc.

 리스트의 주요 연산
• 원소의 참조, 삽입(insert), 삭제(remove), 검색(search), etc.


 대표적인 리스트 구현 방법
배열 연결 리스트
저장 공간 연속된 메모리 공간 임의의 메모리 공간
원소의 삽입&삭제 비효율적 효율적
구현 쉬움 어려움


 연결 리스트(linked list)란?
• 데이터와 링크로 구성된 노드(node)가 연결되어 있는 자료 구조
 데이터(data): 정수, 문자열, 복합 자료형 등
 링크(link, next): 다음 노드를 가리키는 포인터
 노드(node): 데이터와 링크로 이루어진 연결 리스트 구성 단위


 연결 리스트의 장점
• 임의의 위치에 원소의 삽입&삭제가 효율적: 𝑂𝑂(1)
• 크기 제한이 없음

 연결 리스트의 단점
• 임의의 원소 접근이 비효율적: 𝑂𝑂(𝑁𝑁)
• 링크를 위한 여분의 공간 사용
• 구현이 복잡


 단순 연결 리스트(singly linked list)
• 다음 노드에 대한 링크만 가지고 있는 연결 리스트
• 한쪽 방향으로만 순회(traverse)가 가능 (단방향 연결 리스트)

 이중 연결 리스트(doubly linked list)
• 이전 노드와 다음 노드에 대한 링크를 가지고 있는 연결 리스트
• 양방향 순회가 가능 (양방향 연결 리스트)

 원형 연결 리스트(circular linked list)
• 일반적인 연결 리스트의 마지막 노드 링크가 처음 노드를
가리키도록 구성된 자료 구조
• 처음 노드가 다시 나타나면 순회를 멈춤